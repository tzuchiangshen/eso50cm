= Development of telescope control system for the 50cm telescope of the UC Santa Martina Observatory   = 

= Abstract = 
The main telescope of the UC Santa Martina Observatory is a 50cm optical telescope donated by ESO to Pontificia Univesidad Catolica de Chile. During the past years the telescope has been refurbished and used as the main facility for testing and validating new instruments under construction by the center of Astro-Engineering UC. As part of this work the need to develop a more efficient and flexible control system arises. The new distributed control system has been developed on top of Internet Communication Engine (ICE), a framework developed by Zeroc. The result of this work will be presented in this paper which shows ICE as a real alternative for CORBA and other de facto distribute programming framework.

= Introduction =


Brief summary about Santa Martina Observatory and the role ESO50cm plays within it. 

  * Educational telescope
  * Instrument testing and validation (PUCHEROS)

= ESO50cm  telescope = 

The ESO50cm is a equatorial mount telescope, manufactured by the end of 80ths.  *blablabla*

After the hardware refurbish, the telescope comprises of 3 encoders per motor in each axis. two of them are absolute encoders and one located in the worm is relative one. A low level PIC controller was created in order to read and interpret the encoders' gray code and to generate the PWM signal to drive the motors. The embedded PIC controller is controlled by another single board computer, together they form the Telescope Local Control Unit (LCU). One CCD camera is attached to the telescope with focus adjustment and the same light is split and redirected to the PUCHERO [2], an spectrograph designed by the Department of Astro-Engineering [3]

In the following table relevant hardware are highlighted 
  * Equatorial mount telescope, 2 direct motors, 6 encoders (3 per axis)
  * TS-7800 ARM9 CPU, 512 Mb Ram. 
  * PIC18F422
  * CCD BIG6

= Software Architecture = 

In the design of the control software for the telescope, the following base requirements were defined: 1) loosely coupled at subsystem level 2)be able to expose API to modern and mature programming languages, hopefully scripting languages and 3) allow incremental way to introduce new features or subsystems. 

After reviewing reports presented at [3],[4],[5] (papers de tanaka, etc). The Internet Communication Engine (ICE) [1] framework was selected, not only because it fulfills the aforementioned requirements but also provides 1) support of distributed programming environment 2)binding to C++,.NET, Java, Python, Objective-C, Ruby, PHP programming languages, 3) mature and has reasonable size of community, 4) open source LGPL license and finally 4) lightweight and suitable for a small development team.

On top of the framework, a classical software architecture for telescope was chosen. It comprises a Telecope Control Subsystem (TCS), a Detector Control Subsystem (DCS), an Instrument Control Subsystem (ICS) and finally an Observation Coordination Subsystem (OCS) which coordinates the high level logic of an astronomical observation. 

http://eso50cm.googlecode.com/files/eso50cm%20control%20system.jpg

At hardware related subsystems (TCS, ICS, DCS), proper drivers were developed according to the specific hardware. At the same time, the required functionality is exposed through ICE interface.

ICE provides the ICE Slice tool .... *talk about the slice, and show lcu.ice* 

{{{ 
#ifndef LCU_ICE
#define LCU_ICE

module OUC 
{

enum TelescopeDirection {North, South, East, West};

...

interface LCU
{
    idempotent void sayHello(int delay);
    idempotent void shutdown();
  
    EncoderData getEncodersPosition()
         throws TelescopeNotConfiguredEx;
...	
    TelescopeData getPosition()
    	 throws TelescopeNotConfiguredEx;	
    bool isConfigured();
    bool isTracking();

    void setConfiguration(string fileName)
         throws NotConfigurationFileEx;
...
    void setTracking(TrackingInfo trkInfo);
    void parkTelescope();
    void stopTelescope(TelescopeDirection dir);
    void moveToTarget(); 
    void handsetSlew(SlewInfo slew);	 
};
};

}}}
== Key frameworks == 
  * Distribute programming: ICE 
  * Build process: Cmake
  * ARM Simulation: virtualization, VirtualBox, QEMU  
  * GUI: QT4
  * Software repository : code.google.com  
  
== Subsystems == 
  * logical diagram of the architecture (Tzu)
  * logging services (Johnny)
  * telescope61 (Ruben) telescope61-sim (Tzu)
    * share memory 
    * communication with hardware 
  * ObsControl, TcsGui, qths  (MVC)

= Future Challanges = 
  * Integration of CCD, Auto guiding 
  * Interface to Labviw for hardware control 
  * Integration of pointing model (get rid of theSky6)

= Conclusion = 

= References = 
[1] ICE: http://www.zeroc.com/ice.html
[2] paper del PUCHEROS
[3] VLT Software Design 
[4] Departament of Astro-Engineering at UC 