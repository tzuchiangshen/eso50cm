= Development of telescope control system for the 50cm telescope of the UC Santa Martina Observatory   = 

= Abstract = 
The main telescope of the UC Santa Martina Observatory is a 50cm optical telescope donated by ESO to Pontificia Univesidad Catolica de Chile. During the past years the telescope has been refurbished and used as the main facility for testing and validating new instruments under construction by the center of Astro-Engineering UC. As part of this work the need to develop a more efficient and flexible control system arises. The new distributed control system has been developed on top of Internet Communication Engine (ICE), a framework developed by Zeroc. The result of this work will be presented in this paper which shows ICE as a real alternative for CORBA and other de facto distribute programming framework.

= Introduction =

Brief summary Santa Martina Observatory and the role that ESO50cm plays within it. 

  * Educational telescope
  * Instrument testing and validation (PUCHEROS)

= ESO50cm  telescope = 

<font color=red>
The ESO50cm is a equatorial mount telescope, manufactured by the end of 80ths. *...*
</font>

After the hardware refurbish, the telescope comprises of 3 encoders per motor in each axis. two of them are absolute encoders and one located in the worm is relative one. A low level PIC controller was created in order to read and interpret the encoders' gray code and to generate the PWM signal to drive the motors. The embedded PIC controller is controlled by another single board computer, together they form the Telescope Local Control Unit (LCU). One CCD camera is attached to the telescope with focus adjustment and the same light is split and redirected to the PUCHERO `[2]`, an spectrograph designed by the Department of Astro-Engineering [3]

In the following table relevant hardware are highlighted 
  * Equatorial mount telescope, 2 direct motors, 6 encoders (3 per axis)
  * TS-7800 ARM9 CPU, 512 Mb Ram. 
  * PIC18F422
  * CCD BIG6

= Software Architecture = 

== Key frameworks == 
*Summary of the selected technologies*

In the design of the control software for the telescope, the following base requirements were defined: 1) loosely coupled at subsystem level 2)be able to expose API to modern and mature programming languages, hopefully scripting languages and 3) allow incremental way to introduce new features or subsystems. 

After reviewing frameworks dominate in the astronomical software, such as ACS, TANGO, EPICS, ICE [2],[3]. The Internet Communication Engine (ICE) [1] framework was selected, not only because it fulfills the aforementioned requirements but also provides 1) support of distributed programming environment 2)binding to C++,.NET, Java, Python, Objective-C, Ruby, PHP programming languages, 3) mature and has reasonable size of community, 4) open source LGPL license and finally 4) lightweight and suitable for a small development team.

The source code are hosted at Google code [xx] repository, an simple but useful web application to host open source projects, with handy tools to generate documentations, release a new version of binaries, software version control, and source code browsing etc. SVN was selected as the official version control tool for this project.

Regarding to the build and deployment system, we choose Cmake to compile each modules, together with the home made deployment tools a clean build can be created and deploy as easy as one command line. Cmake fulfills perfectly our needs to compile C++, Java and Python, specially it is expressive enough to define dependencies and invokes external code generation tools provided by ICE and QT. 

In order to be efficient in the GUI development, QT was chosen as the main framework. The signal/slot mechanism and the use of MVC pattern really help us to reach high consistency and low coupling among our code. *talk about QT designer and QT creator*

<font color=red>
**ARM Simulation**
  * virtualization, VirtualBox, QEMU**  
</font>

== Logging Services == 
<font color=red>
(Johnny) 
  * pub/sub mechanism
  * persistence plugins (mysql, text)
</font>

== Subsystems == 
On top of the framework, a classical software architecture for telescope was chosen. It comprises a Telescope Control Subsystem (TCS), a Detector Control Subsystem (DCS), an Instrument Control Subsystem (ICS) and finally an Observation Coordination Subsystem (OCS) which coordinates the high level logic of an astronomical observation. 

http://eso50cm.googlecode.com/files/eso50cm%20control%20system.jpg

At hardware related subsystems (TCS, ICS, DCS), proper drivers were developed according to the specific hardware. At the same time, the required functionality is exposed through ICE interface. 

*add a container/component diagram*

ICE provides the ICE Slice tool .... *talk about the slice, and show lcu.ice* 

{{{ 
#ifndef LCU_ICE
#define LCU_ICE

module OUC 
{

enum TelescopeDirection {North, South, East, West};

...

interface LCU
{
    idempotent void sayHello(int delay);
    idempotent void shutdown();
  
    EncoderData getEncodersPosition()
         throws TelescopeNotConfiguredEx;
...	
    TelescopeData getPosition()
    	 throws TelescopeNotConfiguredEx;	
    bool isConfigured();
    bool isTracking();

    void setConfiguration(string fileName)
         throws NotConfigurationFileEx;
...
    void setTracking(TrackingInfo trkInfo);
    void parkTelescope();
    void stopTelescope(TelescopeDirection dir);
    void moveToTarget(); 
    void handsetSlew(SlewInfo slew);	 
};
};

}}}



===Telescope Control Subsystem (TCS)===
The telescope control subsystem was designated to cover all related aspects to the the movement (axis) and sky positioning (tracking) of telescope hardware and provide the high level interface to communicate with the rest of the subsystem (ICS, DCS, etc). TCS is compound of two process which receive instruction from the high level user through the OCS and communicate with the hardware to execute those instructions. Additionally a third process was implemented to simulate operations to be performed by the hardware: 
  * *lcuControl*: This process is in charge to receive the request from the high level users an . This is an ICE process therefore the communication with the high level 
  * *telescope61*:   
  * *telescope61-sim*:
  
   


<font color=red>
  * telescope61 (Ruben) telescope61-sim (Tzu)
    * share memory 
    * communication with hardware 
  * ObsControl, TcsGui, qths  (MVC)
</font>
= Future Challenges = 
  * Integration of CCD, Auto guiding 
  * Interface to Labviw for hardware control 
  * Integration of pointing model (get rid of theSky6)
  * Package of the final observation data into a FITS format

= Conclusion = 
  * ICE framework is a mature distribute programming framework suitable for mission critical application.
  * TS-7800 ARM has proved to be a very robust platform for local control unit development
  * Reuse of software developed by big observatories in educational environment. 
 

= References = 
  * [1] referencia a Astro-ingenieria o el Observatorio UC
  * [2] ICE: http://www.zeroc.com/ice.html
  * [3] S. Shumko, "Ice middleware in the New Solar Telescopeâ€™s Telescope Control System", ADASS XVII, 2008
  * [4] J.C. Guzman, "Preliminary Design of the Australian SKA PathFinder  Telescope Control System", ICALEPCS 2009, Kobe, Japan
  * [5] referencia a un paper del PUCHEROS
  * [6] VLT Software Design 