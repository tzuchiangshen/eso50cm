= Development of telescope control system for the 50cm telescope of the UC Santa Martina Observatory   = 

= Abstract = 
The main telescope of the UC Santa Martina Observatory is a 50cm optical telescope donated by ESO to Pontificia Univesidad Catolica de Chile. During the past years the telescope has been refurbished and used as the main facility for testing and validating new instruments under construction by the center of Astro-Engineering UC. As part of this work the need to develop a more efficient and flexible control system arises. The new distributed control system has been developed on top of Internet Communication Engine (ICE), a framework developed by Zeroc. The result of this work will be presented in this paper which shows ICE as a real alternative for CORBA and other de facto distribute programming framework.

= Introduction =


Brief summary about Santa Martina Observatory and the role ESO50cm plays within it. 

  * Educational telescope
  * Instrument testing and validation (PUCHEROS)

= ESO50cm  telescope = 

The ESO50cm is a equatorial mount telescope, manufactured by the end of 80ths.  *blablabla*

After the hardware refurbish, the telescope comprises of 3 encoders per motor in each axis. two of them are absolute encoders and one located in the worm is relative one. A low level PIC controller was created in order to read and interpret the encoders' gray code and to generate the PWM signal to drive the motors. The embedded PIC controller is controlled by another single board computer, together they form the Telescope Local Control Unit (LCU). One CCD camera is attached to the telescope with focus adjustment. The light is split and send to the PUCHERO instrument [2]

In the following table relevant hardware are highlighted 
  * TS-7800 ARM, 512 Mb Ram. 
  * PIC18F422
  * CCD BIG
  * 
 


Summary about the telescope and its attached instruments. 


= Software Architecture = 
== Requirements == 
  * need for modern languages binding
  * light weight
  * robus upon failure
  * explore integration with labview & NI hardware

== Key frameworks == 
  * Distribute programming: ICE 
  * Build process: Cmake
  * ARM Simulation: virtualization, VirtualBox, QEMU  
  * GUI: QT4
  * Software repository : code.google.com  
  
== Subsystems == 
  * logical diagram of the architecture (Tzu)
  * logging services (Johnny)
  * telescope61 (Ruben) telescope61-sim (Tzu)
    * share memory 
    * communication with hardware 
  * ObsControl, TcsGui, qths  (MVC)

= Future Challanges = 
  * Integration of CCD, Auto guiding 
  * Interface to Labviw for hardware control 
  * Integration of pointing model (get rid of theSky6)

= Conclusion = 

= References = 
[1] ICE: http://www.zeroc.com/ice.html
[2] paper del PUCHEROS
[3] VLT Software Design 
[4]