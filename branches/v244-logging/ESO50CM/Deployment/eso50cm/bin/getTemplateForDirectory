#! /bin/sh
#if [ "`uname`" = "Linux" ]; then enable -n echo; fi
#*******************************************************************************
# 
#   
# who       when      what
# --------  ----------  ----------------------------------------------
# jreveco   2011-03-22  created
#
#************************************************************************
#   NAME
#   getTemplateForDirectory - create/check a SW directory structure 
# 
#   SYNOPSIS
#
#   getTemplateForDirectory MODROOT|PATCHROOT|SWROOT <name>
#
# 
#   DESCRIPTION
#   Utility used to create new or missing part of SW directory 
#   structure for:
#  
#       PATCHROOT   for a patch directory structure
#       MODROOT     for a Source directory structure
#       SWROOT      for a WS or LCU SW Root directory structure
#       SWDATA      for a SW Data directory structure
#
#   <name> 
#       the name of the directory from which the directory structure
#       starts. If not existing already, directory/ies are created.
#
#   BUGS    
#
#----------------------------------------------------------------------

# if input parameters are given must be 2 and in the correct format:

if [ $# != 2 ]
then 
    echo "\n\tUsage: getTemplateForDirectory MODROOT|PATCHROOT|SWROOT <name> \n"
    exit 1
fi 

OPTION=$1
ROOT_NAME=$2

UNAMES=`uname -s`

# directories that shall be present in any area 

BASIC_DIRS="\
          bin         \
          idl         \
          config      \
          include     \
          lib         \
          resources    \
          resources/pics  \
          resources/sounds \
          lib/python   \
          lib/python/site-packages  \
          man         \
          man/man1    \
          man/man2    \
          man/man3    \
          man/man4    \
          man/man5    \
          man/man6    \
          man/man7    \
          man/man8    \
          man/mann    \
          man/manl    \
         "

# directories that shall be present in any module area
MODROOT_LIST="$BASIC_DIRS  \
         doc          \
         object       \
         test         \
         src          \
        "

# directories that shall be present in both integration and SW area 
PATCHROOT_LIST="$BASIC_DIRS"
SWROOT_LIST="$BASIC_DIRS"

case $OPTION in
MODROOT)
    echo "\nCreating/checking Module directory"
    DIR_LIST="$MODROOT_LIST"
    ;;
PATCHROOT)
    echo "\nCreating/checking Patch directory"
    DIR_LIST="$PATCHROOT_LIST"
    ;;
SWROOT)
    echo "\nCreating/checking SW Root directory"
    DIR_LIST="$SWROOT_LIST"
    ;;
*)  
    echo "ERROR >>$OPTION<< is not a valid directory structure."
    exit 1
    ;;
esac

if [ -f $ROOT_NAME ]
then
    echo "\n ERROR: I cannot create the starting directory because a file"
    echo "          called >>$ROOT_NAME<< already exists."
    echo "          Use another name or remove the existing file"
    echo ""
    exit 1
fi

if [ ! -d $ROOT_NAME ]
then
    if mkdir $ROOT_NAME
    then
        echo "   CREATED >>> |---$ROOT_NAME "
    else
        echo "\n ERROR: I cannot create the starting directory >>$ROOT_NAME<<"
        echo "          Please fix the problem and try again."
        echo ""
        exit 1
    fi
else
    echo "               |---$ROOT_NAME "
fi

#
# if not already there, create all the needed subdirectories

for dir in $DIR_LIST
do
    if [ ! -d $ROOT_NAME/$dir ]
    then
        mkdir $ROOT_NAME/$dir
        echo "   CREATED >>>     |---$dir "
    else
        echo "                   |---$dir "
    fi
done

#
# additional case specific actions:
MODE=644
case $OPTION in
MODROOT*)
    if [ ! -f $ROOT_NAME/ChangeLog ]
    then
        echo "\"@(#) \$Id\$\"" > $ROOT_NAME/ChangeLog
        chmod u+w  $ROOT_NAME/ChangeLog
        echo "   CREATED >>>     |---ChangeLog"
    else
        echo "                   |---ChangeLog"
    fi

    if [ "$OPTION" = "MODROOT" ]
    then
        echo "TO DO: add the Tzu's CMake template here"
#        TEMPLATE=$SWROOT/include/Makefile_WS.template
#        FILE=$ROOT_NAME/src/Makefile
#        if grep -v "#%#" $TEMPLATE > ${FILE}.BAK
#        then
#            chmod ${MODE} ${FILE}.BAK
            #
            # setup author and date:
#            AUTHOR=`whoami`
#            DATE=`date "+%d\/%m\/%y"`
#            sed  -e "1,$ s/NNNNNNNN/$AUTHOR/g" \
#                 -e "1,$ s/dd\/mm\/yy/$DATE/g" \
#                 -e "1,$ s/I>-<d/\Id/g"       \
#                 ${FILE}.BAK > ${FILE}
#            rm -f ${FILE}.BAK
#        else
#            echo "\ncannot create >>$FILE<<."
#        fi
#
    else
        echo " INTERNAL ERROR"
        exit 1
    fi

    ;;

PATCHROOT)
    for dir in $PATCHROOT_LIST
    do
        # directories must be writable by other developers
        chmod 775 $ROOT_NAME/$dir
    done
    echo "\n Remember to define \$PATCHROOT to make this area accessible.\n"
    echo "[Patch name] [is under VC?: yes/no] [$USER] [description:] [`date "+%Y/%b/%d"`]" >> $ROOT_NAME/responsible
    ;;

SWROOT)
    echo "\n Remember to define \$SWROOT to make this area accessible.\n"
    ;;


*)
    echo " INTERNAL ERROR"
    exit 1
    ;;

esac

# ___oOo___
