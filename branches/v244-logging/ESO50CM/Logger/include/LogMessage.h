// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `LogMessage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_tcsmgr_CURRENTLY_MOD_eso50cm_ESO50CM_Logger_src_LogMessage_h__
#define ___home_tcsmgr_CURRENTLY_MOD_eso50cm_ESO50CM_Logger_src_LogMessage_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace Log
{

class LoggerException : public ::Ice::UserException
{
public:

    LoggerException() {}
    explicit LoggerException(const ::std::string&);
    virtual ~LoggerException() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    ::std::string message;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

static LoggerException __LoggerException_init;

enum LogLevel
{
    FINEST,
    FINER,
    FINE,
    CONFIG,
    INFO,
    WARNING,
    SEVERE
};

void __write(::IceInternal::BasicStream*, LogLevel);
void __read(::IceInternal::BasicStream*, LogLevel&);

struct LogMessageData
{
    ::Log::LogLevel level;
    ::Ice::Double logtimestamp;
    ::Ice::Double timestamp;
    ::std::string source;
    ::std::string data;
    ::std::string method;
    ::Ice::Int lineNumber;

    bool operator==(const LogMessageData& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(level != __rhs.level)
        {
            return false;
        }
        if(logtimestamp != __rhs.logtimestamp)
        {
            return false;
        }
        if(timestamp != __rhs.timestamp)
        {
            return false;
        }
        if(source != __rhs.source)
        {
            return false;
        }
        if(data != __rhs.data)
        {
            return false;
        }
        if(method != __rhs.method)
        {
            return false;
        }
        if(lineNumber != __rhs.lineNumber)
        {
            return false;
        }
        return true;
    }

    bool operator<(const LogMessageData& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(level < __rhs.level)
        {
            return true;
        }
        else if(__rhs.level < level)
        {
            return false;
        }
        if(logtimestamp < __rhs.logtimestamp)
        {
            return true;
        }
        else if(__rhs.logtimestamp < logtimestamp)
        {
            return false;
        }
        if(timestamp < __rhs.timestamp)
        {
            return true;
        }
        else if(__rhs.timestamp < timestamp)
        {
            return false;
        }
        if(source < __rhs.source)
        {
            return true;
        }
        else if(__rhs.source < source)
        {
            return false;
        }
        if(data < __rhs.data)
        {
            return true;
        }
        else if(__rhs.data < data)
        {
            return false;
        }
        if(method < __rhs.method)
        {
            return true;
        }
        else if(__rhs.method < method)
        {
            return false;
        }
        if(lineNumber < __rhs.lineNumber)
        {
            return true;
        }
        else if(__rhs.lineNumber < lineNumber)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const LogMessageData& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const LogMessageData& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const LogMessageData& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const LogMessageData& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::Log::LogMessageData> LogsVector;
void __writeLogsVector(::IceInternal::BasicStream*, const ::Log::LogMessageData*, const ::Log::LogMessageData*);
void __readLogsVector(::IceInternal::BasicStream*, LogsVector&);

struct LogMessageDataSet
{
    ::Log::LogsVector logs;
    ::Ice::Int firstIndex;
    ::Ice::Int lastIndex;
    ::Ice::Double startTime;
    ::Ice::Double endTime;

    bool operator==(const LogMessageDataSet& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(logs != __rhs.logs)
        {
            return false;
        }
        if(firstIndex != __rhs.firstIndex)
        {
            return false;
        }
        if(lastIndex != __rhs.lastIndex)
        {
            return false;
        }
        if(startTime != __rhs.startTime)
        {
            return false;
        }
        if(endTime != __rhs.endTime)
        {
            return false;
        }
        return true;
    }

    bool operator<(const LogMessageDataSet& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(logs < __rhs.logs)
        {
            return true;
        }
        else if(__rhs.logs < logs)
        {
            return false;
        }
        if(firstIndex < __rhs.firstIndex)
        {
            return true;
        }
        else if(__rhs.firstIndex < firstIndex)
        {
            return false;
        }
        if(lastIndex < __rhs.lastIndex)
        {
            return true;
        }
        else if(__rhs.lastIndex < lastIndex)
        {
            return false;
        }
        if(startTime < __rhs.startTime)
        {
            return true;
        }
        else if(__rhs.startTime < startTime)
        {
            return false;
        }
        if(endTime < __rhs.endTime)
        {
            return true;
        }
        else if(__rhs.endTime < endTime)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const LogMessageDataSet& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const LogMessageDataSet& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const LogMessageDataSet& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const LogMessageDataSet& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

#endif
